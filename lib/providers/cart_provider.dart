import 'package:flutter/material.dart';
import 'package:hive/hive.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/cart_item.dart';

class CartProvider extends ChangeNotifier {
  List<CartItem> _cart = [];
  bool _isLoading = false;
  List<CartItem> get cart => _cart;
  bool get isLoading => _isLoading;

  Future<void> loadCart() async {
    _isLoading = true;
    notifyListeners();

    final prefs = await SharedPreferences.getInstance();
    final int? userId = prefs.getInt('userId');
    if (userId == null) {
      print("‚ùå Kh√¥ng t√¨m th·∫•y userId, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      _isLoading = false;
      notifyListeners();
      return;
    }

    final box = await Hive.openBox<CartItem>('cartBox_$userId');
    _cart = box.values.toList(); // ƒê·∫£m b·∫£o gi·ªè h√†ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t

    // In gi·ªè h√†ng sau khi t·∫£i
    print("üîÑ Gi·ªè h√†ng sau khi t·∫£i: ${_cart.map((e) => e.toJson()).toList()}");

    _isLoading = false;
    notifyListeners();
  }

  Future<void> addToCart(CartItem item) async {
    final prefs = await SharedPreferences.getInstance();
    final int? userId = prefs.getInt('userId');
    if (userId == null) return;

    final box = await Hive.openBox<CartItem>('cartBox_$userId');

    // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
    if (box.containsKey(item.productId)) {
      final existingItem = box.get(item.productId)!;
      existingItem.quantity += item.quantity;
      existingItem.save();
    } else {
      box.put(item.productId, item); // Th√™m m·ªõi n·∫øu ch∆∞a c√≥
    }

    _cart = box.values.toList(); // ƒê·ªçc l·∫°i to√†n b·ªô gi·ªè h√†ng

    // In gi·ªè h√†ng ra ƒë·ªÉ ki·ªÉm tra sau khi th√™m
    print("Gi·ªè h√†ng sau khi th√™m: ${_cart.map((e) => e.toJson()).toList()}");

    notifyListeners();
  }

  Future<void> removeItem(String productId) async {
    final prefs = await SharedPreferences.getInstance();
    final int? userId = prefs.getInt('userId');
    if (userId == null) return;

    final box = await Hive.openBox<CartItem>('cartBox_$userId');
    box.delete(productId);

    _cart = box.values.toList();
    notifyListeners();
  }

  Future<void> decreaseQuantity(String productId) async {
    final prefs = await SharedPreferences.getInstance();
    final int? userId = prefs.getInt('userId');
    if (userId == null) return;

    final box = await Hive.openBox<CartItem>('cartBox_$userId');
    if (box.containsKey(productId)) {
      final existingItem = box.get(productId)!;
      if (existingItem.quantity > 1) {
        existingItem.quantity -= 1;
        existingItem.save();
      } else {
        box.delete(productId);
      }
    }

    _cart = box.values.toList();
    notifyListeners();
  }

  Future<void> increaseQuantity(String productId) async {
    final prefs = await SharedPreferences.getInstance();
    final int? userId = prefs.getInt('userId');
    if (userId == null) return;

    final box = await Hive.openBox<CartItem>('cartBox_$userId');
    if (box.containsKey(productId)) {
      final existingItem = box.get(productId)!;
      final stock =
          existingItem.stock ?? 0; // Ki·ªÉm tra null v√† g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 0

      // Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng gi·ªè h√†ng ch∆∞a v∆∞·ª£t qu√° t·ªìn kho
      if (existingItem.quantity < stock) {
        existingItem.quantity += 1; // TƒÉng s·ªë l∆∞·ª£ng trong gi·ªè
        existingItem.save(); // L∆∞u thay ƒë·ªïi v√†o Hive
      } else {
        // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu s·ªë l∆∞·ª£ng v∆∞·ª£t qu√° t·ªìn kho
        print('‚ùå Kh√¥ng th·ªÉ tƒÉng s·ªë l∆∞·ª£ng. V∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho.');
      }
    }

    _cart = box.values.toList();

    // In gi·ªè h√†ng sau khi tƒÉng s·ªë l∆∞·ª£ng
    print(
        "Gi·ªè h√†ng sau khi tƒÉng s·ªë l∆∞·ª£ng: ${_cart.map((e) => e.toJson()).toList()}");

    notifyListeners();
  }

  double getTotalPrice() {
    return _cart.fold(0, (total, item) => total + (item.price * item.quantity));
  }

  Future<void> clearCart() async {
    final prefs = await SharedPreferences.getInstance();
    final int? userId = prefs.getInt('userId');
    if (userId == null) return;

    final box = await Hive.openBox<CartItem>('cartBox_$userId');
    box.clear();

    _cart = [];
    notifyListeners();
  }
}
